#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <string>
#define max 5000000
template <class T>
class Chain{
private:
  typedef struct _ChainNode
  {
    T data;
    _ChainNode *link;
  }ChainNode;
  ChainNode  *first;
  ChainNode  *last;
  int len;
public:
  Chain();
  ~Chain();
  void append(T  x);
  bool insert(int k,T x);
  bool isEmpty();
  int length();
  bool search(T x);
  bool find(int  k, T &x);
  bool delete_elem(int k,T &x);
  void traverse();
  void join(Chain* x);
	

};
template <class T>
Chain<T>::Chain()
  { // Constructor for the linked linear list
    first = 0;
    last=0;
    len=0;
  }
template <class T>
Chain<T>::~Chain()
  { // Distructor for the linked linear list. Delete all the nodes in chain
    ChainNode *next;  // Next node
    while (first){
      next = first -> link;
      delete  first;
      first = next;
    }
  }
  template <class T>
  bool Chain<T>::isEmpty()
  {
    return len==0;
  }
template <class T>
int Chain<T>::length()
  {
    return len;
  }
template <class T>
bool Chain<T>::search(T x)
  {
    ChainNode *current=first;
    while(current)
      {
	if((current->data)==x)
	  return true;
	current=current->link;
      }
    return false;
  }
template <class T>
bool  Chain<T>::find(int  k, T & x)
  { // Set x to the kth element and return true if kth element is present otherwise return false.
    if (k < 1 || k > len)   return   false;
    ChainNode *current=first;
    int i=1;
    while(i<k)
      {
	current=current->link;
	i++;
      }
    x=current->data;
    return   true;
  }
template <class T>
void Chain<T>::append(T x)
  {  
    if(first==0)
      {
	first=(ChainNode*)malloc(sizeof(ChainNode*));
      
	first->data=x;
	first->link=0;
	last=first;
      }
    else
      {
	ChainNode  *p=(ChainNode*)malloc(sizeof(ChainNode*)) ; 
	p -> data = x;
	p -> link = 0;
	last->link=p;
	last=p;
      }
    len++;
  }
template <class T>
bool Chain<T>::insert(int k,T x)
  {  
    if (k < 1 || k > len)   return   false;
    ChainNode *current=first;
    int i=1;
    while(i<k)
      {
	current=current->link;
	i++;
      }
  
	ChainNode  *p=(ChainNode*)malloc(sizeof(ChainNode*)) ; 
	p -> data = x;
	p -> link = current->link;
	current->link=p;
  
    len++;
    return true;
  }
template <class T>
bool Chain<T>::delete_elem(int k,T &x)
  {  
 if (k < 1 || k > len)   return   false;
   
    ChainNode *current=first;
    int i=1;
    while(i<(k-1))
      {
	current=current->link;
	i++;
      }
  ChainNode* p=current->link;
  current->link=p->link;
  len--;
  x = p->data;
  return true;     
  }
template <class T>
void Chain<T>::traverse()
  {
    ChainNode *current=first;
    while(current)
      {
	std::cout<<(current->data);
	current=current->link;
      }
 
  }
template <class T>
void Chain<T>::join(Chain* x)
  {
    if(x->first)
      {
	last->link=x->first;
	last=x->last;}
  }

 Class Student
 {
   char roll[50];
   int marks;
 };
  int main()
  {
 
    int n;
    std::cin >> n;
    Chain<int> list;
    Chain<int> list2;
    int x;
    //	std::cin>>x;
	//	list.append(x);
       for(int i=1;i<=n;i++)
      {
	std::cin>>x;
	//	std::cout<<"Lenth - "<<list.length()<<"\n";
	list.append(x);
	}
    /*
    std::cin>>x;
    list.insert(2,x);
    std::cout<<"Lenth - "<<list.length()<<"\n";
    std::cout<<"Ele at 4 - "<<list.find(4,x)<<"\n";
    std::cout<<"Ele at 4 - "<<x<<"\n";

    std::cout<<list.delete_elem(4,x);
    std::cout<<"Lenth - "<<list.length()<<"\n";
    std::cout<<"Search For"<<"\n";
    std::cin>>x;
    std::cout<<"Search For - "<<list.search(x)<<"\n";
    */
    list.traverse();
    /*
    std::cin >> n;
    for(int i=1;i<=n;i++)
      {
	int x;
	std::cin>>x;
	list2.append(x);
      }
    list.join(&list2);
    list.traverse();
    */
  }
