#ifndef _LINKEDLIST_H_INCLUDED_
#define _LINKEDLIST_H_INCLUDED_
#include <iostream>
#include <string.h>
using namespace std;
template <class T>
class LinearList{
	private:
		int MaxSize;
		T *element;    // 1D dynamic array
              	int len;
	public:
		LinearList(int  MaxSize);
		LinearList(const LinearList& temp);
		~LinearList();
		bool isEmpty();
		int  length();
		int  maxSize();
		int  returnListElement(int k);
		bool find(int  k, int& x);
		int  search(int& x);
		LinearList  deleteElement(int  k, int& x);
		LinearList  insert(int  k, int& x);
};

LinearList::LinearList(int MaxListSize)
{ // Constructor for the sequential linear list
	MaxSize = MaxListSize;
	element = new  int [MaxSize];
	len = 0;
}

LinearList::LinearList(const LinearList& temp)
{ // Copy constructor
	MaxSize=temp.MaxSize;
	element=new int[MaxSize];
	len=temp.len;
	memcpy(element, temp.element, MaxSize);
}

LinearList::~LinearList()
{ // Distructor for the sequential linear list
	delete [] element;
}

bool  LinearList::isEmpty()
{ // Function that checks whether the list is empty
	 return   len == 0;
}

int  LinearList::length()
{ // Function that returns the length of the list
	 return   len;
}

int  LinearList::maxSize()
{ // Function that returns the length of the list
	 return   MaxSize;
}

int  LinearList::returnListElement(int k)
{ //Function that returns the k-th element of the list
	return element[k];
}
bool  LinearList::find(int  k, int& x)
{ // Set x to the kth element and return true if kth element is present otherwise return false.
	 if (k < 1 || k > len)   return   false;
	 x = element[k-1];
	 return   true;
}

int  LinearList::search(int& x)
{ // Search for x and return the position if found, else return 0.
	 for  (int  i=0; i < len;  i++)
	 	if  (element[i] == x)    return   ++i;
	 return   0;
}

LinearList  LinearList::deleteElement(int  k, int& x)
{ // Set x to the kth element and delete it.
	x = element[k-1];
	for  (int  i=k; i < len;  i++)
		element[i-1] = element[i];
	len--;
	return   *this;
}

LinearList  LinearList::insert(int  k, int& x)
{ // Insert x after kth element.
	for  (int  i=len-1; i >= k;  i--){
	 	element[i+1] = element[i];
	}
 	 element[k] = x;
	 len++;
	 return   *this;
}



int main(void)
{
	int maxSize;
	cout << "Enter the maximum size of the list: ";
	cin >> maxSize;
	LinearList L(maxSize);
	cout << "Length = "<< L.length() << endl;
	int n;
	cout << "Enter the values for n (actual size): ";
	cin >> n;
	int e;
	cout << "Enter the " << n <<" elements to insert into the list: " << endl;
	for (int i=0; i<n; i++){
		cin >> e;
		L.insert(i, e);
		// cout << "Length = "<< L.length() << endl;
	}
	cout << "Length = "<< L.length() << endl;

	int x;
	cout << "\nEnter the element to be searched: ";
	cin >> x;
	if (L.search(x) == 0)
		cout << x << " does not present in the list" << endl;
	else
		cout << x << " present in the list at the position " << L.search(x) << endl;

	cout << "\nMaximum size of the list is " << L.maxSize() << endl;

	cout << "\nElements in the list are: ";
	for (int i=0; i<L.length(); i++)
		cout << L.returnListElement(i) << " ";
	cout << endl;

	int k;
 	cout << "\nEnter the position of the element to be deleted: ";
	cin >> k;
	L.deleteElement(k, x);
	cout << "Deleted element is : " << x << endl;
	cout << "Length = "<< L.length() << endl;

	cout << "Elements in the list are: ";
	for (int i=0; i<L.length(); i++)
		cout << L.returnListElement(i) << " ";
	cout << endl;

	cout << "\nEnter the position for insertion: ";
	cin >> k;
	cout << "Enter the element to be inserted after the position " << k << " : ";
	cin >> x;
	L.insert(k, x);
	cout << "Length = "<< L.length() << endl;

	cout << "Elements in the list are: ";
	for (int i=0; i<L.length(); i++)
		cout << L.returnListElement(i) << " ";
	cout << endl;

}
#endif
